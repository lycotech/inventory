// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  manager
  user
}

enum TransactionType {
  receive
  issue
  adjustment
  transfer
  stock_out
}

enum ImportType {
  full
  stock_receive
  stock_transfer
  stock_alert
  adjustment
  stock_out
}

enum ImportStatus {
  pending
  completed
  failed
}

enum AlertType {
  low_stock
  expiring
  negative_stock
}

enum PriorityLevel {
  low
  medium
  high
}

enum AgingStatus {
  active
  issue
  expired
  adjusted
}

enum ReportType {
  inventory
  transaction
  alert
  custom
}

enum ExecutionStatus {
  success
  failed
  processing
}

enum UnitType {
  // Weight units
  gram
  kilogram
  pound
  ounce
  
  // Volume units
  milliliter
  liter
  gallon
  
  // Count units
  piece
  dozen
  pack
  carton
  box
  case
  
  // Length units
  meter
  centimeter
  inch
  foot
}

model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique
  email        String    @unique
  passwordHash String
  role         Role      @default(user)
  lastLogin    DateTime?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Profile information
  firstName    String?
  lastName     String?
  phoneNumber  String?
  address      String?
  profileImageUrl String?

  // Relations
  createdInventory Inventory[]    @relation("InventoryCreatedBy")
  processedTx      StockTransaction[] @relation("TxProcessedBy")
  processedImports ImportHistory[] @relation("ImportProcessedBy")
  acknowledgedAlerts AlertLog[]   @relation("AlertAcknowledgedBy")
  sessions        UserSession[]
  reports         Report[]        @relation("ReportCreatedBy")
  reportRuns      ReportExecution[] @relation("ReportExecutedBy")
  
  // Batch relations
  createdBatches  Batch[]         @relation("BatchCreatedBy")
  processedBatchTx BatchTransaction[] @relation("BatchTxProcessedBy")
  acknowledgedBatchAlerts BatchAlert[] @relation("BatchAlertAcknowledgedBy")
}

model Inventory {
  id               Int       @id @default(autoincrement())
  barcode          String    @db.VarChar(64)
  category         String
  itemName         String
  searchCode       String
  warehouseName    String    @db.VarChar(100)
  stockQty         Int       @default(0)
  stockAlertLevel  Int       @default(0)
  unit             String    @default("piece") @db.VarChar(20)
  baseUnit         String    @default("piece") @db.VarChar(20)
  conversionFactor Decimal   @default(1.0) @db.Decimal(10, 4)
  expireDate       DateTime?
  expireDateAlert  Int       @default(0)
  createdBy        Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  creator          User      @relation("InventoryCreatedBy", fields: [createdBy], references: [id])
  transactions     StockTransaction[]
  alertLogs        AlertLog[]
  stockAging       StockAging[]
  batches          Batch[]

  @@unique([barcode, warehouseName], name: "barcode_warehouse")
}

model Warehouse {
  id              Int      @id @default(autoincrement())
  warehouseName   String   @unique
  warehouseCode   String   @unique
  location        String?
  contactPerson   String?
  phoneNumber     String?
  email           String?
  isCentralWarehouse Boolean @default(false)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations for transfers
  transfersFrom   StockTransaction[] @relation("TransferFromWarehouse")
  transfersTo     StockTransaction[] @relation("TransferToWarehouse")
  
  // Batch relations
  batches         Batch[]
  batchTransfersFrom BatchTransaction[] @relation("BatchTransferFromWarehouse")
  batchTransfersTo   BatchTransaction[] @relation("BatchTransferToWarehouse")
}

model StockTransaction {
  id               Int             @id @default(autoincrement())
  inventoryId      Int
  transactionType  TransactionType
  quantity         Int
  transactionDate  DateTime
  referenceDoc     String?
  reason           String?
  processedBy      Int
  createdAt        DateTime        @default(now())
  
  // For warehouse transfers
  fromWarehouseId  Int?
  toWarehouseId    Int?

  // Relations
  inventory        Inventory       @relation(fields: [inventoryId], references: [id])
  processor        User            @relation("TxProcessedBy", fields: [processedBy], references: [id])
  fromWarehouse    Warehouse?      @relation("TransferFromWarehouse", fields: [fromWarehouseId], references: [id])
  toWarehouse      Warehouse?      @relation("TransferToWarehouse", fields: [toWarehouseId], references: [id])
}


model AgingCategory {
  id             Int     @id @default(autoincrement())
  categoryName   String
  minDays        Int
  maxDays        Int?
  colorCode      String   @default("#28a745")
  priorityLevel  Int      @default(0)
  isActive       Boolean  @default(true)

  // Relations
  stockAging     StockAging[]
}

model StockAging {
  id                 Int          @id @default(autoincrement())
  inventoryId        Int
  batchNumber        String?      @db.VarChar(100)
  receiveDate        DateTime
  quantityReceived   Int
  quantityRemaining  Int
  agingDays          Int          @default(0)
  agingCategoryId    Int?
  status             AgingStatus  @default(active)
  lastMovementDate   DateTime?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  // Relations
  inventory          Inventory    @relation(fields: [inventoryId], references: [id])
  agingCategory      AgingCategory? @relation(fields: [agingCategoryId], references: [id])

  @@index([inventoryId])
  @@index([agingCategoryId])
}

model Batch {
  id               Int       @id @default(autoincrement())
  batchNumber      String    @unique @db.VarChar(100)
  inventoryId      Int
  warehouseId      Int
  quantityReceived Int
  quantityRemaining Int
  manufactureDate  DateTime?
  expiryDate       DateTime
  expireDateAlert  Int       @default(30)
  supplierInfo     String?   @db.VarChar(255)
  lotNumber        String?   @db.VarChar(100)
  costPerUnit      Decimal?  @db.Decimal(10, 2)
  notes            String?   @db.Text
  isActive         Boolean   @default(true)
  createdBy        Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  inventory        Inventory @relation(fields: [inventoryId], references: [id])
  warehouse        Warehouse @relation(fields: [warehouseId], references: [id])
  creator          User      @relation("BatchCreatedBy", fields: [createdBy], references: [id])
  transactions     BatchTransaction[]
  alertLogs        BatchAlert[]

  @@index([inventoryId])
  @@index([warehouseId])
  @@index([expiryDate])
  @@index([batchNumber])
}

model BatchTransaction {
  id               Int             @id @default(autoincrement())
  batchId          Int
  transactionType  TransactionType
  quantity         Int
  transactionDate  DateTime
  referenceDoc     String?
  reason           String?
  processedBy      Int
  fromWarehouseId  Int?
  toWarehouseId    Int?
  createdAt        DateTime        @default(now())

  // Relations
  batch            Batch           @relation(fields: [batchId], references: [id])
  processor        User            @relation("BatchTxProcessedBy", fields: [processedBy], references: [id])
  fromWarehouse    Warehouse?      @relation("BatchTransferFromWarehouse", fields: [fromWarehouseId], references: [id])
  toWarehouse      Warehouse?      @relation("BatchTransferToWarehouse", fields: [toWarehouseId], references: [id])

  @@index([batchId])
  @@index([transactionDate])
}

enum BatchAlertType {
  expiring_soon    // Within warning period
  expired          // Past expiry date
  low_quantity     // Below threshold
}

model BatchAlert {
  id              Int             @id @default(autoincrement())
  batchId         Int
  alertType       BatchAlertType
  message         String
  priorityLevel   PriorityLevel   @default(medium)
  acknowledged    Boolean         @default(false)
  acknowledgedBy  Int?
  acknowledgedAt  DateTime?
  createdAt       DateTime        @default(now())

  // Relations
  batch           Batch           @relation(fields: [batchId], references: [id])
  acknowledgedUser User?          @relation("BatchAlertAcknowledgedBy", fields: [acknowledgedBy], references: [id])

  @@index([batchId])
  @@index([alertType])
  @@index([acknowledged])
}

model ImportHistory {
  id                Int           @id @default(autoincrement())
  importType        ImportType
  filename          String
  totalRecords      Int           @default(0)
  successfulRecords Int           @default(0)
  failedRecords     Int           @default(0)
  importStatus      ImportStatus  @default(pending)
  processedBy       Int
  createdAt         DateTime      @default(now())

  // Relations
  processor         User          @relation("ImportProcessedBy", fields: [processedBy], references: [id])
}

model AlertLog {
  id              Int           @id @default(autoincrement())
  alertType       AlertType
  inventoryId     Int
  message         String
  priorityLevel   PriorityLevel  @default(medium)
  acknowledged    Boolean        @default(false)
  acknowledgedBy  Int?
  acknowledgedAt  DateTime?
  createdAt       DateTime       @default(now())

  // Relations
  inventory       Inventory      @relation(fields: [inventoryId], references: [id])
  acknowledgedUser User?         @relation("AlertAcknowledgedBy", fields: [acknowledgedBy], references: [id])
}

model UserSession {
  id            Int       @id @default(autoincrement())
  userId        Int
  sessionToken  String    @unique
  expiresAt     DateTime
  createdAt     DateTime  @default(now())

  // Relations
  user          User      @relation(fields: [userId], references: [id])
}

model Report {
  id               Int         @id @default(autoincrement())
  reportName       String
  reportType       ReportType
  reportConfig     Json
  createdBy        Int
  isScheduled      Boolean     @default(false)
  scheduleFrequency String?    // e.g., daily, weekly, cron expr
  lastGenerated    DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  creator          User        @relation("ReportCreatedBy", fields: [createdBy], references: [id])
  executions       ReportExecution[]
}

model ReportExecution {
  id             Int             @id @default(autoincrement())
  reportId       Int?
  executionTime  DateTime        @default(now())
  parameters     Json?
  filePath       String?
  status         ExecutionStatus @default(processing)
  errorMessage   String?
  executedBy     Int
  createdAt      DateTime        @default(now())

  // Relations
  report         Report?         @relation(fields: [reportId], references: [id])
  executor       User            @relation("ReportExecutedBy", fields: [executedBy], references: [id])
}

// Application key-value settings
model AppSetting {
  key       String   @id
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
